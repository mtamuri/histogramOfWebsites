#include <iostream>
#include <vector>
#include <limits>

// Function to print the Tic-Tac-Toe board
void printBoard(const std::vector<char>& board) {
    for (int i = 0; i < 9; ++i) {
        std::cout << board[i];
        if (i % 3 == 2) {
            std::cout << std::endl;
        } else {
            std::cout << " | ";
        }
    }
}

// Function to check for a win or a tie
bool checkWin(const std::vector<char>& board, char player) {
    // Check rows, columns, and diagonals
    return ((board[0] == player && board[1] == player && board[2] == player) ||
            (board[3] == player && board[4] == player && board[5] == player) ||
            (board[6] == player && board[7] == player && board[8] == player) ||
            (board[0] == player && board[3] == player && board[6] == player) ||
            (board[1] == player && board[4] == player && board[7] == player) ||
            (board[2] == player && board[5] == player && board[8] == player) ||
            (board[0] == player && board[4] == player && board[8] == player) ||
            (board[2] == player && board[4] == player && board[6] == player));
}

// Function to check if the board is full (tie)
bool isFull(const std::vector<char>& board) {
    for (char cell : board) {
        if (cell == ' ') {
            return false;
        }
    }
    return true;
}

// Minimax algorithm for the AI player
int minimax(std::vector<char>& board, char player) {
    char opponent = (player == 'X') ? 'O' : 'X';

    if (checkWin(board, player)) {
        return 10;
    } else if (checkWin(board, opponent)) {
        return -10;
    } else if (isFull(board)) {
        return 0;
    }

    int bestScore = (player == 'X') ? std::numeric_limits<int>::min() : std::numeric_limits<int>::max();

    for (int i = 0; i < 9; ++i) {
        if (board[i] == ' ') {
            board[i] = player;
            int score = minimax(board, (player == 'X') ? 'O' : 'X');
            board[i] = ' '; // Undo the move

            if (player == 'X') {
                bestScore = std::max(bestScore, score);
            } else {
                bestScore = std::min(bestScore, score);
            }
        }
    }

    return bestScore;
}

// Find the best move using the minimax algorithm
int findBestMove(std::vector<char>& board) {
    int bestMove = -1;
    int bestScore = std::numeric_limits<int>::min();

    for (int i = 0; i < 9; ++i) {
        if (board[i] == ' ') {
            board[i] = 'X';
            int score = minimax(board, 'O');
            board[i] = ' '; // Undo the move

            if (score > bestScore) {
                bestScore = score;
                bestMove = i;
            }
        }
    }

    return bestMove;
}

int main() {
    std::vector<char> board(9, ' ');

    std::cout << "Welcome to Tic-Tac-Toe!\n";
    printBoard(board);

    while (true) {
        int playerMove;
        std::cout << "Enter your move (0-8): ";
        std::cin >> playerMove;

        if (playerMove < 0 || playerMove > 8 || board[playerMove] != ' ') {
            std::cout << "Invalid move. Try again.\n";
            continue;
        }

        board[playerMove] = 'O';

        // Check if the player wins or ties
        if (checkWin(board, 'O')) {
            printBoard(board);
            std::cout << "You win!\n";
            break;
        } else if (isFull(board)) {
            printBoard(board);
            std::cout << "It's a tie!\n";
            break;
        }

        // AI's turn
        int aiMove = findBestMove(board);
        board[aiMove] = 'X';

        // Check if the AI wins or ties
        if (checkWin(board, 'X')) {
            printBoard(board);
            std::cout << "AI wins!\n";
            break;
        } else if (isFull(board)) {
            printBoard(board);
            std::cout << "It's a tie!\n";
            break;
        }

        // Display the current state of the board
        printBoard(board);
    }

    return 0;
}
